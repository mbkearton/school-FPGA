
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module tictactoe(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire button_clock;
wire VGA_clk;
wire [26:0] pos_LOG_game;
wire [9:0] offsetx;
wire [9:0] offsety;
wire [3:0] pos_CTRL_sel;
wire hsyncOut;
wire vsyncOut;
wire [9:0] xpos;
wire [9:0] ypos;
wire redWins;
wire blueWins;
wire [9:0] ren;
wire [9:0] bluen;

button_clock 	CLK_button	(.CLOCK_50(MAX10_CLK1_50), .CLOCK_BUTTON(button_clock));
clock 			CLK_vga_1 	(.inclk0(MAX10_CLK1_50), .c1(VGA_clk));
gamelogic LOG_game (
	.position(SW[3:0]),
	.vga_clk(VGA_clk),
	.place(KEY[0]),
	.reset(SW[9]),
	.pos1(pos_LOG_game[26:24]),
	.pos2(pos_LOG_game[23:21]),
	.pos3(pos_LOG_game[20:18]),
	.pos4(pos_LOG_game[17:15]),
	.pos5(pos_LOG_game[14:12]),
	.pos6(pos_LOG_game[11:9]),
	.pos7(pos_LOG_game[8:6]),
	.pos8(pos_LOG_game[5:3]),
	.pos9(pos_LOG_game[2:0])
	);
select_controller CTRL_sel (
	.button_clock(button_clock),
	.reset(SW[9]),
	.sel(KEY[1]),
	.offsetx(offsetx),
	.offsety(offsety),
	.position(pos_CTRL_sel)
	);
video_controller CTRL_vid (
	.vga_clock(VGA_clk),
	.hsyncOut(hsyncOut),
	.vsyncOut(vsyncOut),
	.xposOut(xpos),
	.yposOut(ypos)
	);
winner LOG_winner (
	.pos1(pos_LOG_game[26:24]),
	.pos2(pos_LOG_game[23:21]),
	.pos3(pos_LOG_game[20:18]),
	.pos4(pos_LOG_game[17:15]),
	.pos5(pos_LOG_game[14:12]),
	.pos6(pos_LOG_game[11:9]),
	.pos7(pos_LOG_game[8:6]),
	.pos8(pos_LOG_game[5:3]),
	.pos9(pos_LOG_game[2:0]),
	.redWins(redWins),
	.blueWins(blueWins)
	);
decode_square DEC_square (
	.pos1(pos_LOG_game[26:24]),
	.pos2(pos_LOG_game[23:21]),
	.pos3(pos_LOG_game[20:18]),
	.pos4(pos_LOG_game[17:15]),
	.pos5(pos_LOG_game[14:12]),
	.pos6(pos_LOG_game[11:9]),
	.pos7(pos_LOG_game[8:6]),
	.pos8(pos_LOG_game[5:3]),
	.pos9(pos_LOG_game[2:0]),
	.ren1(ren[9]),
	.ren2(ren[8]),
	.ren3(ren[7]),
	.ren4(ren[6]),
	.ren5(ren[5]),
	.ren6(ren[4]),
	.ren7(ren[3]),
	.ren8(ren[2]),
	.ren9(ren[1]),
	.bluen1(bluen[9]),
	.bluen2(bluen[8]),
	.bluen3(bluen[7]),
	.bluen4(bluen[6]),
	.bluen5(bluen[5]),
	.bluen6(bluen[4]),
	.bluen7(bluen[3]),
	.bluen8(bluen[2]),
	.bluen9(bluen[1]),
	);
gameVGA_decode DEC_vga (
	.xpos(xpos),
	.ypos(ypos),
	.offsetx(offsetx),
	.offsety(offsety),
	.redWins(redWins),
	.blueWins(blueWins),
	.ren1(ren[9]),
	.ren2(ren[8]),
	.ren3(ren[7]),
	.ren4(ren[6]),
	.ren5(ren[5]),
	.ren6(ren[4]),
	.ren7(ren[3]),
	.ren8(ren[2]),
	.ren9(ren[1]),
	.bluen1(bluen[9]),
	.bluen2(bluen[8]),
	.bluen3(bluen[7]),
	.bluen4(bluen[6]),
	.bluen5(bluen[5]),
	.bluen6(bluen[4]),
	.bluen7(bluen[3]),
	.bluen8(bluen[2]),
	.bluen9(bluen[1]),
	.red(VGA_R),
	.blue(VGA_B),
	.green(VGA_G)
	);



//=======================================================
//  Structural coding
//=======================================================



endmodule
