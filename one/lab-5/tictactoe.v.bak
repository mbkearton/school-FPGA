
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module tictactoe(

	//////////// CLOCK //////////
	input 		          		ADC_CLK_10,
	input 		          		MAX10_CLK1_50,
	input 		          		MAX10_CLK2_50,

	//////////// SEG7 //////////
	output		     [7:0]		HEX0,
	output		     [7:0]		HEX1,
	output		     [7:0]		HEX2,
	output		     [7:0]		HEX3,
	output		     [7:0]		HEX4,
	output		     [7:0]		HEX5,

	//////////// KEY //////////
	input 		     [1:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,

	//////////// Accelerometer //////////
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,

	//////////// Arduino //////////
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

wire vga_clk;
wire clk_slow;

clock v1(MAX10_CLK1_50,vga_clk);








						 
video_controller video1(vga_clk,VGA_HS, VGA_VS, xpos,ypos);
button_clock(MAX10_CLK1_50,clk_slow);
wire [10:0] xpos;
wire [9:0] ypos;
wire [3:0] R;
wire [3:0] G;
wire [3:0] B;
wire [9:0] offsetx;
wire [9:0] offsety;
reg [21:0] count;


wire redWins;
wire blueWins;
wire [3:0] pos;
wire [2:0] pos0,pos1,pos2,pos3,pos4,pos5,pos6,pos7,pos8;
wire ren1,ren2,ren3,ren4,ren5,ren6,ren7,ren8,ren9,bluen1,bluen2,bluen3,bluen4,bluen5,bluen6,bluen7,bluen8,bluen9;


/*
always@(posedge vga_clk) begin
count <= count + 1'b1;
if (count[21] == 1'b1) begin
count <= 21'd0;
clk_slow <= ~clk_slow;
end 
end
*/



select_controller(clk_slow,SW[9],KEY[0],offsetx,offsety,pos);


gameVGA_decode game_inst(.xpos(xpos), .ypos(ypos),.offsetx(offsetx),.offsety(offsety),.redWins(redWins),.blueWins(blueWins),.ren1(ren1),.ren2(ren2),.ren3(ren3),
.ren4(ren4),.ren5(ren5),.ren6(ren6),.ren7(ren7),.ren8(ren8),.ren9(ren9),.bluen1(bluen1),

.bluen2(bluen2),
.bluen3(bluen3),
.bluen4(bluen4),
.bluen5(bluen5),
.bluen6(bluen6),
.bluen7(bluen7),
.bluen8(bluen8),
.bluen9(bluen9),
.red(VGA_R),
.blue(VGA_B),
.green(VGA_G)
);




decode_square sq1(
.pos9(pos9),.pos1(pos1),.pos2(pos2),.pos3(pos3),.pos4(pos4),.pos5(pos5),.pos6(pos6),.pos7(pos7),.pos8(pos8),
.ren1(ren1),.ren2(ren2),.ren3(ren3),.ren4(ren4),.ren5(ren5),.ren6(ren6),.ren7(ren7),.ren8(ren8),.ren9(ren9), .bluen1(bluen1),.bluen2(bluen2),
.bluen3(bluen3),.bluen4(bluen4),.bluen5(bluen5),.bluen6(bluen6),.bluen7(bluen7),.bluen8(bluen8),.bluen9(bluen9)
);

gamelogic game1(.position(pos),.vga_clk(vga_clk),.place(KEY[1]),.reset(SW[9]),.pos9(pos9),.pos1(pos1),.pos2(pos2),.pos3(pos3),.pos4(pos4),.pos5(pos5),.pos6(pos6),.pos7(pos7),.pos8(pos8)
);

winner w1(.pos9(pos9),.pos1(pos1),.pos2(pos2),.pos3(pos3),.pos4(pos4),.pos5(pos5),.pos6(pos6),.pos7(pos7),.pos8(pos8),.redWins(redWins),.blueWins(blueWins));



//=======================================================
//  Structural coding
//=======================================================



endmodule
