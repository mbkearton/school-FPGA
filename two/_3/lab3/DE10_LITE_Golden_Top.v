// ============================================================================
//   Ver  :| Author					:| Mod. Date :| Changes Made:
//   V1.1 :| Alexandra Du			:| 06/01/2016:| Added Verilog file
// ============================================================================


//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

`define ENABLE_ADC_CLOCK
`define ENABLE_CLOCK1
`define ENABLE_CLOCK2
`define ENABLE_SDRAM
`define ENABLE_HEX0
`define ENABLE_HEX1
`define ENABLE_HEX2
`define ENABLE_HEX3
`define ENABLE_HEX4
`define ENABLE_HEX5
`define ENABLE_KEY
`define ENABLE_LED
`define ENABLE_SW
`define ENABLE_VGA
`define ENABLE_ACCELEROMETER
`define ENABLE_ARDUINO
`define ENABLE_GPIO

module DE10_LITE_Golden_Top(

	//////////// ADC CLOCK: 3.3-V LVTTL //////////
`ifdef ENABLE_ADC_CLOCK
	input 		          		ADC_CLK_10,
`endif
	//////////// CLOCK 1: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK1
	input 		          		MAX10_CLK1_50,
`endif
	//////////// CLOCK 2: 3.3-V LVTTL //////////
`ifdef ENABLE_CLOCK2
	input 		          		MAX10_CLK2_50,
`endif

	//////////// SDRAM: 3.3-V LVTTL //////////
`ifdef ENABLE_SDRAM
	output		    [12:0]		DRAM_ADDR,
	output		     [1:0]		DRAM_BA,
	output		          		DRAM_CAS_N,
	output		          		DRAM_CKE,
	output		          		DRAM_CLK,
	output		          		DRAM_CS_N,
	inout 		    [15:0]		DRAM_DQ,
	output		          		DRAM_LDQM,
	output		          		DRAM_RAS_N,
	output		          		DRAM_UDQM,
	output		          		DRAM_WE_N,
`endif

	//////////// SEG7: 3.3-V LVTTL //////////
`ifdef ENABLE_HEX0
	output		     [7:0]		HEX0,
`endif
`ifdef ENABLE_HEX1
	output		     [7:0]		HEX1,
`endif
`ifdef ENABLE_HEX2
	output		     [7:0]		HEX2,
`endif
`ifdef ENABLE_HEX3
	output		     [7:0]		HEX3,
`endif
`ifdef ENABLE_HEX4
	output		     [7:0]		HEX4,
`endif
`ifdef ENABLE_HEX5
	output		     [7:0]		HEX5,
`endif

	//////////// KEY: 3.3 V SCHMITT TRIGGER //////////
`ifdef ENABLE_KEY
	input 		     [1:0]		KEY,
`endif

	//////////// LED: 3.3-V LVTTL //////////
`ifdef ENABLE_LED
	output		     [9:0]		LEDR,
`endif

	//////////// SW: 3.3-V LVTTL //////////
`ifdef ENABLE_SW
	input 		     [9:0]		SW,
`endif

	//////////// VGA: 3.3-V LVTTL //////////
`ifdef ENABLE_VGA
	output		     [3:0]		VGA_B,
	output		     [3:0]		VGA_G,
	output		          		VGA_HS,
	output		     [3:0]		VGA_R,
	output		          		VGA_VS,
`endif

	//////////// Accelerometer: 3.3-V LVTTL //////////
`ifdef ENABLE_ACCELEROMETER
	output		          		GSENSOR_CS_N,
	input 		     [2:1]		GSENSOR_INT,
	output		          		GSENSOR_SCLK,
	inout 		          		GSENSOR_SDI,
	inout 		          		GSENSOR_SDO,
`endif

	//////////// Arduino: 3.3-V LVTTL //////////
`ifdef ENABLE_ARDUINO
	inout 		    [15:0]		ARDUINO_IO,
	inout 		          		ARDUINO_RESET_N,
`endif

	//////////// GPIO, GPIO connect to GPIO Default: 3.3-V LVTTL //////////
`ifdef ENABLE_GPIO
	inout 		    [35:0]		GPIO
`endif
);



//=======================================================
//  REG/WIRE declarations
//=======================================================
wire CLK_PoV;	//	divided DISPLAY clk sends to controller
wire CLK_BCD;	// divided COUNTER clk sends to counter
wire CLK_MUX;				// 2-digit
//wire [1:0] CLK_MUX;	//	4-digit
wire [3:0] TENS;
wire [3:0] ONES;
wire [7:0] DISPLAY_TENS;
wire [7:0] DISPLAY_ONES;
wire  [7:0] CATHODES;
wire ANODE_0;
wire ANODE_1;
//// extra anodes for 4-digit demo
//wire ANODE_2;
//wire ANODE_3;
////
//=======================================================
//  Structural coding
//=======================================================
clk_div_COUNTER clk0 (.in_clk(MAX10_CLK1_50), .out_clk(CLK_BCD));
clk_div_DISPLAY clk1 (.in_clk(MAX10_CLK1_50), .out_clk(CLK_PoV));

bcd_99_counter bcd0 (.clk(CLK_BCD), .count_tens(TENS), .count_ones(ONES));

bcd_decoder_2_digits dec0 (
	.in_digit_tens(TENS),
	.in_digit_ones(ONES),
	.out_digit_tens(DISPLAY_TENS),
	.out_digit_ones(DISPLAY_ONES)
);

controller_clk_pov con (
	.clk(CLK_PoV),
	.mux_clk(CLK_MUX),
//	//	extra anodes for 4-digit demo
//	.anode2(ANODE_2),
//	.anode3(ANODE_3),
//	//
	.anode0(ANODE_0),
	.anode1(ANODE_1)
);

mux_2_digit_display mux0 (
	.sel(CLK_MUX),
	.tens(DISPLAY_TENS),
	.ones(DISPLAY_ONES),
	.cathodes(CATHODES)
);

fake_SSEG_2 sseg0 (
	.ANODE_0(ANODE_0),
	.ANODE_1(ANODE_1),
	.CATHODE_HEX(CATHODES),
	.REAL_HEX0(HEX0),
	.REAL_HEX1(HEX1)
);

//// 4 DIGIT DISPLAY DEMO
//fake_SSEG_4 sseg1 (
//	.ANODE_0(ANODE_0),
//	.ANODE_1(ANODE_1),
//	.ANODE_2(ANODE_2),
//	.ANODE_3(ANODE_3),
//	.CATHODE_HEX(CATHODES),
//	.REAL_HEX0(HEX0),
//	.REAL_HEX1(HEX1),
//	.REAL_HEX2(HEX2),
//	.REAL_HEX3(HEX3)
//);
////
endmodule
